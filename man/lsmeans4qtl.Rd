% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsmeans4qtl.R
\name{lsmeans4qtl}
\alias{lsmeans4qtl}
\title{Using a QTL model, calcuate conditional QTL genotype effects}
\usage{
lsmeans4qtl(cross, pheno.col = 1, form = NULL, mod, covar = NULL,
  prob.thresh = 0, ...)
}
\arguments{
\item{cross}{The qtl cross object used to generate the model. Must contain genotype
probabilities, calculated via calc.genoprob.}

\item{pheno.col}{Character or numeric vector indicating the phenotype to be tested.
Only 1 phenotype can be tested at a time.}

\item{form}{Character formula that must match the QTL in the fitted QTL (mod) object.}

\item{mod}{A QTL model, generated by either makeqtl (etc.) or stepwiseqtl. The model
must be generated using what = "prob" (makeqtl) or method = "hk".}

\item{covar}{dataframe of covariates with names that match terms in the formula.
Each column must be either a character or factor. If a numeric vector was used to fit the
model, convert it to a factor by as.factor.}

\item{prob.thresh}{The genotype probability threshold required to call a genotype. If set at
.5 (default) all individuals are assigned genotype calls, otherwise, those with a probability
< prob.threshold are called as NA. Values closer to 1 are more stringent.}

\item{...}{additional arguments passed on to lsmeans.}
}
\value{
A dataframe of (least square) means.
}
\description{
\code{lsmeans4qtl} Takes a QTL model, formula and returns standard
and SAS - style LSMeans. If the "lsmeans" package is not installed
means and sem are reported without least square means.
}
\details{
This function iterates through the terms in the formula, pulling out (ls)means.
It calls the function lsmeans from the lsmeans package, which calculates SAS-style
least square means. Regular means are calculated by aggregate.
}
\examples{
library(qtlTools)

data(fake.bc)
cross<-fake.bc
cross <- calc.genoprob(cross, step=2.5)

# Make a QTL Model
mod <- makeqtl(cross, chr = c(2,5), pos = c(40,25), what = "prob")
nform <- "y ~ Q1 + Q2 + Q1*sex + sex"
sex <- data.frame(sex = as.factor(cross$phe$sex))
summary(fitqtl(cross, pheno.col = "pheno1", covar = data.frame(sex = cross$phe$sex),
   method = "hk", qtl = mod, formula = nform))
sex1<-pull.pheno(cross, "sex")

# Standard Effect plot
effectplot(cross, pheno.col = "pheno1", mname2 = "2@40",
   mname1 = "Sex", mark1 = sex1, geno1 = c("F","M"))

# Calculate lsmeans and regular means
sex2<-ifelse(sex1 == 0, "F","M")
ms<-lsmeans4qtl(cross, pheno.col = "pheno1",form = nform, mod = mod, covar=data.frame(sex = sex2))

library(lsmeans)
lsms<-lsmeans4qtl(cross, pheno.col = "pheno1",form = nform, mod = mod, covar=data.frame(sex = sex2))
# Cull to lsmeans and regular means
lsms<-lsms[!is.na(lsms$Q1) & !is.na(lsms$sex),c("Q1","sex","lsmean","SE","mean","sem")]
library(ggplot2)
lms<-lsms[,c("Q1","sex","mean","sem")]
lms$type <- "mean"
lsm<-lsms[,c("Q1","sex","lsmean","SE")]
lsm$type<-"lsmean"

# Put the two on top of eachother to plot in the same graph
colnames(lsm)[3:4]<-c("mean","se")
colnames(lms)[3:4]<-c("mean","se")
tp<-rbind(lsm,lms)

# Make the plot
library(ggplot2)
pos<-position_dodge(.1)
ggplot(tp, aes(x = Q1, y = mean, shape = sex,
   color = sex, linetype = type, group = interaction(sex,type)))+
   geom_point(position = pos)+
   geom_line(position = pos)+
   theme_jtl()+
   geom_errorbar(aes(ymin = mean - se, ymax = mean+se), width = .1,position = pos)+
   ggtitle("sas-style LSMeans")
}

