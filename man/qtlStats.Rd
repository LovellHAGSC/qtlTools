% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qtlStats.R
\name{qtlStats}
\alias{qtlStats}
\title{Extract statistics from a QTL model}
\usage{
qtlStats(cross, mod, phe, cistrans = NULL, covar = NULL,
  ci.method = "drop", drop = 1.5, prob = 0.95, form = NULL,
  calcConfint = TRUE, calcMeans = TRUE, cisdist = 10, ...)
}
\arguments{
\item{cross}{The qtl cross object with marker names that need to be changed.}

\item{mod}{A QTL model, generated by either makeqtl (etc.) or stepwiseqtl.}

\item{phe}{Character or numeric vector indicating the phenotype to be tested}

\item{cistrans}{If used in an eQTL design, cis trans can be supplied as either the
number of the QTL in the model, e.g. Q1 = 1. Otherwise, cistrans can be specified as
a two-element numeric string, where the first element is the chromosome and the second is
the position. For example, c(1,10) indicates that this cis position of the QTL is 1@10cM. If
supplied, the QTL type is annotated by cis/trans position of each qtl.}

\item{ci.method}{The method for confidence interval estimation. Can be "drop", which
calls the dropint function, or "bayes", which calles the bayesint function.}

\item{drop}{If ci.method = "drop", this indicates the LOD score reduction that classifies
the interval}

\item{prob}{If ci.method = "bayes", this indicates the confidence interval desired}

\item{form}{If a generic (not stepwiseqtl) qtl model is supplied and does
not contain a formula, this is required. The formula must match the QTL in the
fitted QTL (mod) object.}

\item{calcConfint}{Should confidence intervals be calculated?}

\item{calcMeans}{Should allelic means be calculated?}

\item{cisdist}{Numeric, what is the window surrounding the QTL point estimate that a QTL
can be called cis?}
}
\value{
A dataframe of statistics.
}
\description{
\code{qtlStats} Takes a QTL model and calculates F-statistics, LOD scores,
confidence intervals, allelic means. If used in the context of eQTL mapping,
permits inference of whether a QTL is cis or trans.
}
\details{
This function works for riself, bc, f2 and 4-way mapping populations. It is advisable
to run both sim.geno and calc.genoprob prior to using qtlStats, as this will speed up the analysis.
Also, it is important to note that this function works best on models generated from stepwiseqtl.
}
\examples{
library(qtl)
data(fake.f2)
cross=fake.f2
fake.f2<-calc.genoprob(fake.f2)
covar<-matrix(pull.pheno(fake.f2,pheno.col="sex"))
mod=stepwiseqtl(fake.f2, max.qtl=3, method="hk", covar=covar)
form = "y ~ covar + Q1 + Q2 + Q3 + Q2:Q3 + Q1:covar"
colnames(covar)<-"covar"
qtlStats(cross=fake.f2, mod=mod,covar=covar,form=form,
         phe="phenotype", cistrans=c(1,30))

data(fake.bc)
covar<-matrix(pull.pheno(fake.bc,pheno.col="sex"))
colnames(covar)<-"covar"
fake.bc<-calc.genoprob(fake.bc)
mod = stepwiseqtl(fake.bc, pheno.col="pheno1", max.qtl=3, method="hk", covar=covar)
qtlStats(cross=fake.bc, mod=mod,covar=covar,
         phe="pheno1", cistrans=c(1,30))

mod = stepwiseqtl(fake.bc, pheno.col="pheno1", max.qtl=3, penalties = c(0,0,0), method="hk", covar=covar)
qtlStats(cross=fake.bc, mod=mod,covar=covar,
         phe="pheno1", cistrans=c(2,30))
data(fake.4way)
fake.4way<-calc.genoprob(fake.4way)
fake.4way<-sim.geno(fake.4way)
covar<-matrix(pull.pheno(fake.4way,pheno.col="sex"))
colnames(covar)<-"covar"
fake.bc<-calc.genoprob(fake.4way)
mod = stepwiseqtl(fake.4way, pheno.col="phenotype", max.qtl=3, penalties = c(3,4,3), method="hk", covar=covar)
qtlStats(cross=fake.4way, mod=mod,covar=covar,
         phe="phenotype")
form="y ~ covar + Q1 + Q2 + Q3 + Q1:Q3 + covar*Q1"
qtlStats(cross=fake.4way, mod=mod,covar=covar, form=form,
         phe="phenotype")
form="y ~ covar + Q1 + covar*Q1"
mod<-makeqtl(fake.4way, chr=2, pos=15)
qtlStats(cross=fake.4way, mod=mod,covar=covar, form=form,
         phe="phenotype")
}

